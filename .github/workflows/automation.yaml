# Write a github Action to run the logon.robot script using ubuntu-latest runner
# add python libraries for chrome driver
name: Automation

on: workflow_dispatch
# on:
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   branches:
  #     - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Chrome browser
        run: |
          sudo apt-get update
          wget -q -O /tmp/chrome.deb "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_114.0.5735.90-1_amd64.deb"
          sudo dpkg -i /tmp/chrome.deb
          sudo apt-get install -f
          google-chrome --version

      - name: Install Chrome WebDriver
        run: |
          ps -ef | grep --color=auto -i chrome
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          echo "################## CHROME VERSION: $CHROME_VERSION ##################"
          wget -q -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip"
          sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
          chromedriver --version
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Run automation
        run: |
          robot --outputdir results login.robot
          test_output=$(python test-report-parser.py)
          echo "output from Python Parser Script:"
          echo $test_output
          
          # Define Azure DevOps organization, project, test plan ID, and personal access token (PAT)
          azdevops_org="amitabisht"
          azdevops_project="test"
          azdevops_pat="${{ secrets.AZURE_PAT }}"
          azdevops_test_plan_id=15
          azdevops_test_suite_id=16
          azdevops_api_version=6.0
          
          # Function to display error message and exit
          function display_error() {
            echo "Error: $1"
            exit 1
          }

          #Get Test PointIDs
          test_point_response=$(curl -H "Content-Type: application/json" -H "Authorization: Basic $(echo -n :${azdevops_pat} | base64)" \
           "https://dev.azure.com/${azdevops_org}/${azdevops_project}/_apis/test/Plans/${azdevops_test_plan_id}/suites/${azdevops_test_suite_id}/points?api-version=${azdevops_api_version}")

          if [ $? -ne 0 ]; then
            display_error "Curl command failed"
          fi
          
          # Parse the response using jq to extract TestPointIds and format them as an array
          test_point_ids="["
            for point in $(echo $test_point_response | jq -r '.value[].id'); do
              test_point_ids+=" $point,"
            done
            # Remove the trailing comma and add closing bracket
            test_point_ids="${test_point_ids%,}]"

          echo "test point IDs: $test_point_ids"

          ######Create Test Run######
          test_run_response=$(curl -s POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Basic $(echo -n :${azdevops_pat} | base64)" \
            "https://dev.azure.com/${azdevops_org}/${azdevops_project}/_apis/test/runs?api-version=${azdevops_api_version}" \
            -d "{
              \"name\": \"AppAutomationTest\",
              \"plan\": {
                \"id\": \"$azdevops_test_plan_id\"
              },
              \"pointIds\": $test_point_ids
            }")
            test_run_id=$(echo $test_run_response | jq -r '.id' )
            echo "test run ID: $test_run_id"
            
          if [ $? -ne 0 ]; then
            display_error "Curl command failed"
          fi

          ##### Get Test Run Results
          test_result_response=$(curl -H "Content-Type: application/json" -H "Authorization: Basic $(echo -n :${azdevops_pat} | base64)" \
           "https://dev.azure.com/${azdevops_org}/${azdevops_project}/_apis/test/runs/${test_run_id}/results?api-version=${azdevops_api_version}")

          if [ $? -ne 0 ]; then
            display_error "Curl command failed"
          fi
        
          ################################
          test_result_ids="["
            for res in $(echo $test_result_response | jq -r '.value[].id'); do
              test_result_ids+=" $res,"
            done
            # Remove the trailing comma and add closing bracket
            test_result_ids="${test_result_ids%,}]"
          echo "test result IDs: $test_result_ids"
          total_results=$(echo $test_output | jq length)
          echo "Total Results: $total_results"
          test_results=()
          i=0
          IFS=$'\n'
          for result in $(echo $test_output | jq -c '.[]'); do

              test_id=$(echo $result | jq -r '.test_id')
              test_name=$(echo $result | jq -r '.test_name')
              test_duration=$(echo $result | jq -r '.test_duration')
              outcome=$(echo $result | jq -r '.test_status')
              test_result_id=$(echo "${test_result_ids}" | jq -r ".[$i]")
            ##  test_results+=$(echo "{\"test_result_id\": \"$test_result_id\", \"id\": \"$test_id\", \"name\": \"$test_name\", \"duration\": \"$test_duration\", \"outcome\": \"$outcome\"}")
              test_results+=$(echo "{\"id\": \"$test_result_id\", \"durationInMs\": $test_duration, \"outcome\": \"$outcome\"}")

              if [ $i -lt "$((total_results - 1))" ]; then
                test_results+=","
              fi
              i=$((i+1))

              echo "***********************"
              echo "json result: $result"
              echo "test_id: $test_id"
              echo "test_name: $test_name"
              echo "test_duration: $test_duration"
              echo "test_result: $outcome"
              echo "test_result_id: $test_result_id"
          done
          echo $test_results

          # ## Update Test Results
          curl -s -X PATCH \
              -H "Content-Type: application/json" \
              -H "Authorization: Basic $(echo -n :${azdevops_pat} | base64)" \
              "https://dev.azure.com/${azdevops_org}/${azdevops_project}/_apis/test/runs/${test_run_id}/results?api-version=${azdevops_api_version}" \
              -d '[$test_results]'

          if [ $? -ne 0 ]; then
            display_error "Curl command failed"
          fi

      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: Robot_Framework_Results
          path: results/**
