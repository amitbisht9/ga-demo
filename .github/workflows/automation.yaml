# Write a github Action to run the logon.robot script using ubuntu-latest runner
# add python libraries for chrome driver
name: Automation

on: workflow_dispatch
# on:
  # push:
  #   branches:
  #     - main
  # pull_request:
  #   branches:
  #     - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Chrome browser
        run: |
          sudo apt-get update
          wget -q -O /tmp/chrome.deb "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_114.0.5735.90-1_amd64.deb"
          sudo dpkg -i /tmp/chrome.deb
          sudo apt-get install -f
          google-chrome --version
          whereis google-chrome

      - name: Install Chrome WebDriver
        run: |
          ps -ef | grep --color=auto -i chrome
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          echo "################## CHROME VERSION: $CHROME_VERSION ##################"
          wget -q -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip"
          sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
          chromedriver --version
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Run automation
        run: |
          robot --outputdir results  --xunit report.xml login.robot
          apt-get update && apt-get install xmlstarlet
          # Load the XML file
          xml_content=$(<output.xml)

          # Find all test case elements and iterate over them
          while IFS= read -r test_case; do
              # Extract test case ID, name, status, and duration
              test_id=$(xmlstarlet sel -t -v "tag" <<< "$test_case")
              test_name=$(xmlstarlet sel -t -v "@name" <<< "$test_case")
              test_status=$(xmlstarlet sel -t -v "status/@status" <<< "$test_case")
              test_duration=$(xmlstarlet sel -t -v "status/@elapsed" <<< "$test_case")
              
              # Print test case ID, name, status, and duration
              echo "Test Case ID: $test_id, Test Case Name: $test_name, Test Status: $test_status, Test Duration: $test_duration"
          done < <(xmlstarlet sel -t -c "//test" <<< "$xml_content")

      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: Robot_Framework_Results
          path: results/**

